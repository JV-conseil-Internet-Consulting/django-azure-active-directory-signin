{
    // Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "bash": {
        "prefix": [
            // "bash",
            // "#!",
            "shebang"
        ],
        "body": [
            "#!/usr/bin/env bash",
            "# -*- coding: UTF-8 -*-",
            "#",
            "# author        : JV-conseil",
            "# credits       : JV-conseil",
            "# copyright     : Copyright (c) 2019-2023 JV-conseil",
            "#                 All rights reserved",
            "#====================================================",
            "",
        ],
        "description": "Shebang Bash executor"
    },
    "function": {
        "prefix": [
            "_jvcl_::",
            "function"
        ],
        "body": [
            "_jvcl_::${1:generic_function}() {",
            "\tlocal _arg=\"\\${1:-\"something\"}\"",
            "\tif cmd; then",
            "\t\t_arg=\"something else\"",
            "\t\ttrue",
            "\telse",
            "\t\tfalse",
            "\tfi",
            "}",
        ],
        "description": [
            "This defines a generic function _jvcl_::generic_function() {}.\n",
            "The reserved word function is optional.\n",
            "If the function reserved word is supplied, the parentheses are optional.\n",
            "1. Recommended way:\n",
            "name() {}\n",
            "2. C-like-way:\nfunction name [()] {}"
        ]
    },
    "array_loop": {
        "prefix": [
            "for_array",
        ],
        "body": [
            "for _item in \"${MY_ARRAY[@]}\"; do",
            "\techo \"${_item}\"",
            "done",
        ],
        "description": [
            "Loop through an array",
        ]
    },
    "cat": {
        "prefix": [
            "cat",
        ],
        "body": [
            "cat <<EOF",
            "",
            "===================",
            " TITLE ",
            "===================",
            "",
            "EOF",
        ],
        "description": [
            "Concatenate FILE(s) to standard output",
        ]
    },
    "case": {
        "prefix": [
            "case",
        ],
        "body": [
            "case \"\\${_choices\\}\" in",
            "",
            "\"First Choice\")",
            "\techo -n \"First Choice\"",
            "\t;;",
            "",
            "\"Second Choice\" | \"Third Choice\")",
            "\techo -n \"Second Choice\"",
            "\t;;",
            "",
            "*)",
            "\techo -n \"Catch All\"",
            "\t;;",
            "",
            "esac"
        ],
        "description": [
            "The bash case statement is generally used",
            "to simplify complex conditionals when",
            "you have multiple different choices.\n",
            "Using the case statement instead of",
            "nested if statements will help you",
            "make your bash scripts more readable",
            "and easier to maintain.",
        ]
    },
}